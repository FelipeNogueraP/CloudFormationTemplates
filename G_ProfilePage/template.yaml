AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: A template for setting up a full CI/CD pipeline and serverless infrastructure for a static website.

# Parameters:
# ArtifactStoreBucketName:
#   Type: String
#   Description: Enter the name of the S3 bucket
# DeploymentBucketName:
#   Type: String
#   Description: Enter the name of the S3 bucket

Resources:
  # Pipeline Role
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:CreateProject"
                  - "codebuild:DeleteProject"
                  - "lambda:InvokeFunction"
                  - "cloudwatch:PutMetricData"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "secretsmanager:GetSecretValue"
                  - "codecommit:UploadArchive"
                  - "codecommit:GetUploadArchiveStatus"
                  - "codecommit:GitPull"
                  - "codecommit:GetBranch"
                  - "codecommit:GetCommit"
                  - "codecommit:GetRepository"
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource: "*"
                Condition:
                  StringEqualsIfExists:
                    iam:PassedToService:
                      - "cloudformation.amazonaws.com"
                      - "elasticbeanstalk.amazonaws.com"
                      - "ec2.amazonaws.com"
                      - "ecs-tasks.amazonaws.com"
              - Effect: Allow
                Action:
                  - "codedeploy:CreateDeployment"
                  - "codedeploy:GetApplication"
                  - "codedeploy:GetApplicationRevision"
                  - "codedeploy:GetDeployment"
                  - "codedeploy:GetDeploymentConfig"
                  - "codedeploy:RegisterApplicationRevision"
                  - "codestar-connections:UseConnection"
                  - "elasticbeanstalk:*"
                  - "ec2:*"
                  - "elasticloadbalancing:*"
                  - "autoscaling:*"
                  - "cloudwatch:*"
                  - "s3:*"
                  - "sns:*"
                  - "cloudformation:*"
                  - "rds:*"
                  - "sqs:*"
                  - "ecs:*"
                  - "lambda:ListFunctions"
                  - "opsworks:CreateDeployment"
                  - "opsworks:DescribeApps"
                  - "opsworks:DescribeCommands"
                  - "opsworks:DescribeDeployments"
                  - "opsworks:DescribeInstances"
                  - "opsworks:DescribeStacks"
                  - "opsworks:UpdateApp"
                  - "opsworks:UpdateStack"
                  - "cloudformation:CreateStack"
                  - "cloudformation:DeleteStack"
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:UpdateStack"
                  - "cloudformation:CreateChangeSet"
                  - "cloudformation:DeleteChangeSet"
                  - "cloudformation:DescribeChangeSet"
                  - "cloudformation:ExecuteChangeSet"
                  - "cloudformation:SetStackPolicy"
                  - "cloudformation:ValidateTemplate"
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuildBatches"
                  - "codebuild:StartBuildBatch"
                  - "devicefarm:ListProjects"
                  - "devicefarm:ListDevicePools"
                  - "devicefarm:GetRun"
                  - "devicefarm:GetUpload"
                  - "devicefarm:CreateUpload"
                  - "devicefarm:ScheduleRun"
                  - "servicecatalog:ListProvisioningArtifacts"
                  - "servicecatalog:CreateProvisioningArtifact"
                  - "servicecatalog:DescribeProvisioningArtifact"
                  - "servicecatalog:DeleteProvisioningArtifact"
                  - "servicecatalog:UpdateProduct"
                  - "ecr:DescribeImages"
                  - "states:DescribeExecution"
                  - "states:DescribeStateMachine"
                  - "states:StartExecution"
                  - "appconfig:StartDeployment"
                  - "appconfig:StopDeployment"
                  - "appconfig:GetDeployment"
                Resource: "*"

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [codebuild.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:us-west-2:454748197495:log-group:/aws/codebuild/MyCodeBuildProject:*"
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketAcl"
                  - "s3:GetBucketLocation"
                  - "s3:ListBucket"
                Resource:
                  - "arn:aws:s3:::mybuckettostoreartifacts1234"
                  - "arn:aws:s3:::mybuckettostoreartifacts1234/*"
              - Effect: Allow
                Action:
                  - "codebuild:CreateReportGroup"
                  - "codebuild:CreateReport"
                  - "codebuild:UpdateReport"
                  - "codebuild:BatchPutTestCases"
                  - "codebuild:BatchPutCodeCoverages"
                Resource:
                  - !GetAtt BuildLogGroup.Arn

  BuildLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: "/aws/codebuild/G-stackBuildLogGroup"
      RetentionInDays: 180

  # Bucket Policies
  ArtifactStoreBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactStoreBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "DenyPublicAccess"
            Effect: "Deny"
            Principal: "*"
            Action: "s3:*"
            Resource: !Sub "arn:aws:s3:::${ArtifactStoreBucket}/*"
            Condition:
              StringNotEquals:
                aws:PrincipalOrgID: "o-a35kshlxd2"
              Bool:
                "aws:SecureTransport": "false"

  DeploymentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DeploymentBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowCloudFrontServicePrincipal"
            Effect: "Allow"
            Principal:
              Service: "cloudfront.amazonaws.com"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${DeploymentBucket}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !GetAtt MyCloudFrontDistribution.DomainName

  # Build Project
  MyCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: MyCodeBuildProject
      Description: "CodeBuild project for building static website"
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
      Source:
        Type: CODEPIPELINE

      # Source:
      #   Type: GITHUB
      #   Location: "https://github.com/FelipeNogueraP/notus-pro-react.git"
      #   GitCloneDepth: 1
      #   BuildSpec: buildspec.yml

  # Where to store the build output
  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      # BucketName: !Ref ArtifactStoreBucketName
      BucketName: mybuckettostoreartifacts1234

  # Where to store the Deployment artifacts
  DeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      AccessControl: Private
      # BucketName: !Ref DeploymentBucketName
      BucketName: mybuckettostoredeployment1234957

  # Pipeline definition
  MyPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStoreBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                RepositoryName: G-profile-page
                BranchName: master
              OutputArtifacts:
                - Name: SourceOutput # This will be used as input in the next stage
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref MyCodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput # This will be used as input in the next stage
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                BucketName: !Ref DeploymentBucket
                Extract: true
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1

  MyCloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: MyOriginAccessControl
        Description: Origin Access Control for the CloudFront Distribution
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  MyCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        # Aliases:
        #   - www.soportejuridico.co
        # This is pointing to my current cloudformation distribution and result in error
        DefaultRootObject: index.html
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:454748197495:certificate/72adf801-3231-488c-bafe-1dd20ceea6ee
          SslSupportMethod: sni-only
        Origins:
          - DomainName: !GetAtt DeploymentBucket.DomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !GetAtt MyCloudFrontOriginAccessControl.Id
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
          MinTTL: 1
          DefaultTTL: 43200
          MaxTTL: 31536000
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        Enabled: true

  # Lambda function
  MyEmailSenderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: emailSender.lambda_handler
      Runtime: python3.10
      CodeUri: .
      Description: "A Lambda function that sends emails via SES."
      MemorySize: 128
      Timeout: 10
      Policies:
        - arn:aws:iam::aws:policy/AmazonSESFullAccess

  # Api Gateway that triggers the lambda function
  MyApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        paths:
          /sendmail:
            post:
              produces:
                - application/json
              responses:
                "200":
                  description: "200 response"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyEmailSenderFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"

  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyEmailSenderFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
