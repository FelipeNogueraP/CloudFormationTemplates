AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: A template for setting up a full CI/CD pipeline and serverless infrastructure for a static website.

Parameters:
  # ArtifactStoreBucketName:
  #   Type: String
  #   Description: Enter the name of the S3 bucket
  # DeploymentBucketName:
  #   Type: String
  #   Description: Enter the name of the S3 bucket
  GitHubOAuthTokenARN:
    Type: String
    Default: "arn:aws:secretsmanager:us-west-2:454748197495:secret:TokenForGithubOauth-ZAkPnk"

Resources:
  # Pipeline Roles
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:CreateProject"
                  - "codebuild:DeleteProject"
                  - "lambda:InvokeFunction"
                  - "cloudwatch:PutMetricData"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "secretsmanager:GetSecretValue"
                Resource: "*"

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [codebuild.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:GetObjectVersion"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "secretsmanager:GetSecretValue"
                Resource: "*"
  # Bucket Policies
  ArtifactStoreBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactStoreBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowCloudFrontAccess"
            Effect: "Allow"
            Principal:
              CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${ArtifactStoreBucket}/*"

  DeploymentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DeploymentBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowCloudFrontAccess"
            Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOAI}"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${DeploymentBucket}/*"
  # Build Project
  MyCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: MyCodeBuildProject
      Description: "CodeBuild project for building static website"
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
      Source:
        Type: CODEPIPELINE

      # Source:
      #   Type: GITHUB
      #   Location: "https://github.com/FelipeNogueraP/notus-pro-react.git"
      #   GitCloneDepth: 1
      #   BuildSpec: buildspec.yml

  # Where to store the build output
  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      # BucketName: !Ref ArtifactStoreBucketName
      BucketName: mybuckettostoreartifacts1234
  # Where to store the Deployment artifacts
  DeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      AccessControl: Private
      # BucketName: !Ref DeploymentBucketName
      BucketName: mybuckettostoredeployment1234957

  # Wekbook for Github to trigger the Pipeline
  PipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Sub "{{resolve:secretsmanager:${GitHubOAuthTokenARN}:SecretString}}"
        # Token stored on AWS Secrets Manager
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: "refs/heads/{master}"
      TargetPipeline: !Ref MyPipeline
      TargetPipelineVersion: !GetAtt MyPipeline.Version
      TargetAction: SourceAction
      RegisterWithThirdParty: true

  # Pipeline definition
  MyPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStoreBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: FelipeNogueraP
                Repo: notus-pro-react.git
                Branch: master
                OAuthToken: !Ref GitHubOAuthTokenARN
              OutputArtifacts:
                - Name: SourceOutput # This will be used as input in the next stage
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref MyCodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput # This will be used as input in the next stage
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                BucketName: !Ref DeploymentBucket
                Extract: true
                ObjectKey: build/ #Destination folder from the buildspec.yaml "artifacts/baseDirectory"
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1

  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "OAI for accessing S3 bucket"

  MyCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        # Aliases:
        #   - www.soportejuridico.co
        # This is pointing to my current cloudformation distribution and result in error
        DefaultRootObject: index.html
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:454748197495:certificate/72adf801-3231-488c-bafe-1dd20ceea6ee
          SslSupportMethod: sni-only
        Origins:
          - DomainName: !GetAtt DeploymentBucket.DomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOAI}"
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        Enabled: true

  # Lambda function
  MyEmailSenderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: emailSender.lambda_handler
      Runtime: python3.10
      CodeUri: G_ProfilePage/
      Description: "A Lambda function that sends emails via SES."
      MemorySize: 128
      Timeout: 10
      Policies:
        - SESFullAccess
      Environment:
        Variables:
          AWS_REGION: us-west-2

  # Api Gateway that triggers the lambda function
  MyApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        paths:
          /sendmail:
            post:
              produces:
                - application/json
              responses:
                "200":
                  description: "200 response"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyEmailSenderFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"

  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyEmailSenderFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
