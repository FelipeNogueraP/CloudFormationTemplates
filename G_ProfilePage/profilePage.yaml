AWSTemplateFormatVersion: "2010-09-09"
Description: A template for setting up a full CI/CD pipeline and serverless infrastructure for a static website.

Parameters:
  GitHubOAuthToken:
    Description: "OAuth token for GitHub to authenticate"
    Type: String
    NoEcho: true

Resources:
  # Pipeline Roles
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuilds"
                  - "lambda:*"
                  - "cloudwatch:*"
                  - "logs:*"
                Resource: "*"

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [codebuild.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                  - "logs:*"
                  - "cloudwatch:*"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:UploadLayerPart"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:PutImage"
                Resource: "*"
  # Build Project
  MyCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: MyCodeBuildProject
      Description: "CodeBuild project for building static website"
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-aarch64-standard:3.0
      Source:
        Type: GITHUB
        Location: "https://github.com/FelipeNogueraP/notus-pro-react.git"
        SourceVersion: master
        GitCloneDepth: 1
        BuildSpec: buildspec.yml

  # Where to store the build output
  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      AccessControl: Private
      BucketName: G-Profile-Page-ArtifactStoreBucket

  # Wekbook for Github to trigger the Pipeline
  PipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubOAuthToken # Token stored on AWS Secrets Manager
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: "refs/heads/{master}"
      TargetPipeline: !Ref MyPipeline
      TargetPipelineVersion: !GetAtt MyPipeline.Version
      TargetAction: SourceAction
      RegisterWithThirdParty: true

  # Pipeline definition
  MyPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStoreBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHub_Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: [FelipeNogueraP]
                Repo: [notus-pro-react.git]
                Branch: master
                OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: SourceOutput # This will be used as input in the next stage
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref MyCodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput # This will be used as input in the next stage
              RunOrder: 1
        - Name: Deploy
          Actions: 
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration: 
                BucketName: !ref ArtifactStoreBucket
                Extract: true
                ObjectKey: build/ #Destination folder from the buildspec.yaml "artifacts/baseDirectory"
              InputArtifacts: 
                - Name: BuildOutput
              RunOrder: 1




  MyCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - www.soportejuridico.co
        DefaultRootObject: index.html
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-west-2:454748197495:certificate/eb366362-e5f3-4656-b76f-ddc59fc4f655
          SslSupportMethod: sni-only
        Origins:
          - DomainName: !GetAtt ArtifactStoreBucket.WebsiteURL
            Id: S3Origin
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        Enabled: true




# Keep in mind:

# The S3 bucket name must be globally unique.
# The SSL certificate for CloudFront should be in the us-east-1 region, even if your other resources are in different regions.
# Ensure the domain name is configured with your DNS provider to point to the CloudFront distribution.
# The S3 bucket policy and CloudFront OAI (Origin Access Identity) might need to be configured for enhanced security and to ensure that the S3 bucket is only accessible via the CloudFront distribution.
# Update your buildspec file to include commands to copy the build artifacts to the S3 bucket if required.
